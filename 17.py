# -----------------------------------------------------------------------------
# Section 1: List Operations
# -----------------------------------------------------------------------------
print("--- Section 1: List Operations ---")

# Example 1: Concatenate two lists
# The '+' operator creates a new list containing all elements from both lists.
list_a = [4, 3, 2, 9, 10, 44, 1]
list_b = [5, 6, 2, 8, 15, 14, 12]
concatenated_list = list_a + list_b
print(f"Concatenated list: {concatenated_list}")

# Example 2: Remove an item by index using pop()
# The pop() method removes the item at the given index and returns it.
numbers = [4, 3, 2, 9, 10, 44, 1, 9, 12]
index_to_remove = 4
removed_item = numbers.pop(index_to_remove)
print(f"Original list: [4, 3, 2, 9, 10, 44, 1, 9, 12]")
print(f"Removed item at index {index_to_remove}: {removed_item}")
print(f"List after pop(): {numbers}")

# Example 3: Add an element to the end of a list
animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print(f"Updated animals list: {animals}")

# Example 4: Count occurrences of an element in a list
vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count_of_i = vowels.count('i')
print(f"The count of 'i' in {vowels} is: {count_of_i}")

# Example 5: Count occurrences of a tuple within a list
random_elements = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
tuple_to_count = ('a', 'b')
count = random_elements.count(tuple_to_count)
print(f"The count of {tuple_to_count} is: {count}")

# Example 6: Remove all items from a list
# Renamed from 'list' to avoid shadowing the built-in list type.
mixed_list = [{1, 2}, 'a', ['1.1', '2.2']]
print(f"Original mixed list: {mixed_list}")
mixed_list.clear()
print(f"List after clear(): {mixed_list}")

# Example 7: Generate a list using a list comprehension
numbers_from_range = [x for x in range(10)]
print(f"List generated by list comprehension: {numbers_from_range}")

# Example 8: Create a new list with uppercase elements
name_string = "AMITKAYAL"
uppercase_chars = [char.upper() for char in name_string]
print(f"Original string: '{name_string}'")
print(f"List of uppercase characters: {uppercase_chars}")

# Example 9: Sort a list of strings alphabetically (in-place)
fruits = ["orange", "mango", "kiwi", "pineapple", "banana"]
print(f"Original list of fruits: {fruits}")
fruits.sort()
print(f"Sorted list of fruits: {fruits}")

# Example 10: Turn every item of a list into its square
numbers_to_square = [1, 2, 3, 4, 5, 6, 7]
squared_numbers = [x * x for x in numbers_to_square]
print(f"Squared numbers: {squared_numbers}")

# Example 11: Remove empty strings from a list of strings
names = ["Mike", "", "Emma", "Kelly", "", "Brad"]
# A more readable list comprehension to filter out empty strings.
filtered_names = [name for name in names if name]
print(f"List with empty strings removed: {filtered_names}")

# Example 12: Generate a list of even numbers between two numbers
start_num = 4
end_num = 30
even_numbers = list(range(start_num, end_num, 2))
print(f"Even numbers between {start_num} and {end_num}: {even_numbers}")

# Example 13: Find the largest item in a list
number_list = [4, 6, 8, 24, 12, 2]
largest_item = max(number_list)
print(f"The largest item in {number_list} is: {largest_item}")



# -----------------------------------------------------------------------------
# Section 2: String Operations
# -----------------------------------------------------------------------------
print("\n--- Section 2: String Operations ---")

# Example 14: Access the first character of a string
greeting = "Hello World"
first_char = greeting[0]
print(f"First character in '{greeting}': {first_char}")

# Example 15: Access the last character of a string
last_char = greeting[-1]
print(f"Last character in '{greeting}': {last_char}")

# Example 16: Calculate the length of a string
word_length = len(greeting)
print(f"Length of '{greeting}': {word_length}")

# Example 17: Count the number of spaces in a string
sentence = "Count the number of spaces"
space_count = sentence.count(' ')
print(f"Number of spaces in '{sentence}': {space_count}")

# Example 18: Split a string into a list of words
words = greeting.split(' ')
print(f"Splitting '{greeting}' by space: {words}")

# Example 19: Repeat a string
ten_dots = "." * 10
print(f"Ten dots: {ten_dots}")

# Example 20: Replace a substring
# Renamed 'input' to avoid shadowing the built-in input() function.
original_string = "Hello World"
substring_to_replace = "Hello"
replacement = "Bye"
new_string = original_string.replace(substring_to_replace, replacement)
print(f"String after replacement: {new_string}")

# Example 21: Remove leading whitespace
string_with_whitespace = "   xyz "
stripped_leading = string_with_whitespace.lstrip()
print(f"String after removing leading characters: '{stripped_leading}'")

# Example 22: Remove trailing whitespace
stripped_trailing = string_with_whitespace.rstrip()
print(f"String after removing trailing characters: '{stripped_trailing}'")

# Example 23: Check if all characters are alphanumeric (letters or numbers)
# "Hello World" is not alphanumeric because of the space.
check_alnum = greeting.isalnum()
print(f"Is '{greeting}' alphanumeric? {check_alnum}")
print(f"Is 'HelloWorld123' alphanumeric? {'HelloWorld123'.isalnum()}")


# Example 24: Check if all characters are alphabetic
check_alpha = greeting.isalpha()
print(f"Is '{greeting}' alphabetic? {check_alpha}")
print(f"Is 'HelloWorld' alphabetic? {'HelloWorld'.isalpha()}")

# Example 25: Check if a string contains only digits
check_digit = greeting.isdigit()
print(f"Does '{greeting}' contain only digits? {check_digit}")
print(f"Does '12345' contain only digits? {'12345'.isdigit()}")

# Example 26: Check if a string is in all upper case
check_upper = greeting.isupper()
print(f"Is '{greeting}' all uppercase? {check_upper}")
print(f"Is 'HELLO' all uppercase? {'HELLO'.isupper()}")

# Example 27: Check if a string starts with a specific character
check_starts_with = greeting.startswith('H')
print(f"Does '{greeting}' start with 'H'? {check_starts_with}")

# Example 28: Get the integer (ASCII/Unicode) value of a character
# Renamed 'str' to avoid shadowing the built-in str type.
character = "A"
ascii_value = ord(character)
print(f"The integer value of '{character}' is: {ascii_value}")

# Example 29: Counting total digits in a string
string_to_check = "abc4234AFde"
digit_count = sum(c.isdigit() for c in string_to_check)
print(f"Number of digits in '{string_to_check}': {digit_count}")

# Example 30: Counting total alphabetic characters in a string
alpha_count = sum(c.isalpha() for c in string_to_check)
print(f"Number of alphabetic characters in '{string_to_check}': {alpha_count}")

# Example 31: Counting total upper case characters in a string
# Original code had a bug: char.upper() is always truthy. Use isupper().
upper_count = sum(c.isupper() for c in string_to_check)
print(f"Number of uppercase characters in '{string_to_check}': {upper_count}")

# Example 32: Counting total lower case characters in a string
# Original code had a bug: char.lower() is always truthy. Use islower().
lower_count = sum(c.islower() for c in string_to_check)
print(f"Number of lowercase characters in '{string_to_check}': {lower_count}")

# Example 33: Arrange string characters so lowercase letters come first
mixed_case_str = "PyNaTive"
lower_chars = [char for char in mixed_case_str if char.islower()]
upper_chars = [char for char in mixed_case_str if char.isupper()]
sorted_string = ''.join(lower_chars + upper_chars)
print(f"Original string: '{mixed_case_str}'")
print(f"Arranged string: '{sorted_string}'")

# Example 34: Remove all characters other than integers from a string
str_with_numbers = 'I am 25 years and 10 months old'
digits_only = "".join(filter(str.isdigit, str_with_numbers))
print(f"Digits extracted from string: '{digits_only}'")



# -----------------------------------------------------------------------------
# Section 3: Set and Dictionary Operations
# -----------------------------------------------------------------------------
print("\n--- Section 3: Set and Dictionary Operations ---")

# Example 35: Join two sets using union()
set1 = {"a", "b", "c"}
set2 = {1, 2, 3}
union_set = set1.union(set2)
print(f"Union of {set1} and {set2}: {union_set}")

# Example 36: Keep only items present in both sets (intersection)
set_x = {"apple", "banana", "cherry"}
set_y = {"google", "microsoft", "apple"}
print(f"Original sets: {set_x}, {set_y}")
set_x.intersection_update(set_y)
print(f"Intersection (items in both): {set_x}")

# Example 37: Keep items that are NOT present in both sets (symmetric difference)
set_a = {"apple", "banana", "cherry"}
set_b = {"google", "microsoft", "apple"}
print(f"Original sets: {set_a}, {set_b}")
set_a.symmetric_difference_update(set_b)
print(f"Symmetric difference (non-duplicate items): {set_a}")

# Example 38: Create and print a dictionary
car_info = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(f"Sample dictionary: {car_info}")

# Example 39: Calculate the length (number of key-value pairs) of a dictionary
dict_length = len(car_info)
print(f"Length of dictionary: {dict_length}")

# Example 40: Get unique values from a dictionary
monthly_speeds = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 
                  'June': 53, 'july': 54, 'Aug': 44, 'Sept': 54}
# Using a set is the most Pythonic way to get unique items.
unique_speeds = list(set(monthly_speeds.values()))
print(f"Unique speed values: {unique_speeds}")

# Example 41: Merge two dictionaries
current_employees = {1: 'Scott', 2: "Eric", 3: "Kelly"}
former_employees = {2: 'Eric', 4: "Emma"}
# The double-splat operator (**) merges dicts. Values from the second
# dict will overwrite values from the first if keys are the same.
all_employees = {**current_employees, **former_employees}
print(f"Merged employee dictionary: {all_employees}")

# Example 42: Convert two lists into a dictionary
item_ids = [54, 65, 76]
item_names = ["Hard Disk", "Laptop", "RAM"]
item_dictionary = dict(zip(item_ids, item_names))
print(f"Dictionary created from two lists: {item_dictionary}")



# -----------------------------------------------------------------------------
# Section 4: Algorithms and Logic
# -----------------------------------------------------------------------------
print("\n--- Section 4: Algorithms and Logic ---")

# Example 43: Generate Fibonacci series up to a limit
def generate_fibonacci(limit):
    """Generates a list of Fibonacci numbers up to a given limit."""
    result = []
    a, b = 0, 1
    while a < limit:
        result.append(a)
        a, b = b, a + b
    return result

fib_series = generate_fibonacci(100)
print(f"Fibonacci series up to 100: {fib_series}")

# Example 44: Bubble sort algorithm
def bubble_sort(data_list):
    """Sorts a list of numbers using the bubble sort algorithm."""
    n = len(data_list)
    # Make a copy to avoid modifying the original list
    sorted_list = data_list[:]
    for i in range(n):
        for j in range(0, n - i - 1):
            if sorted_list[j] > sorted_list[j + 1]:
                # Pythonic way to swap elements
                sorted_list[j], sorted_list[j + 1] = sorted_list[j + 1], sorted_list[j]
    return sorted_list

numbers_to_sort = [1, 5, 3, 4, 19, 2]
sorted_numbers = bubble_sort(numbers_to_sort)
print(f"Bubble Sorted list: {sorted_numbers}")

# Example 45: Remove all occurrences of a value from a list
def remove_all_occurrences(sample_list, value_to_remove):
    """Returns a new list with all instances of a value removed."""
    return [value for value in sample_list if value != value_to_remove]

original_list = [5, 20, 15, 20, 25, 50, 20]
value_to_remove = 20
filtered_list = remove_all_occurrences(original_list, value_to_remove)
print(f"List after removing all {value_to_remove}s: {filtered_list}")

# Example 46: Validate an email address using regex
import re

def is_valid_email(email):
    """Checks if an email string is a valid format."""
    # A common, though not exhaustive, regex for email validation.
    regex = r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    return re.search(regex, email) is not None

email1 = "ishwarraja@gmail.com"
email2 = "invalid-email"
print(f"Is '{email1}' a valid email? {is_valid_email(email1)}")
print(f"Is '{email2}' a valid email? {is_valid_email(email2)}")

# Example 47: Validate a password
class PasswordValidator:
    """A class to validate password strength."""
    def __init__(self, password):
        self.password = password
        self.errors = []

    def validate(self):
        """
        Checks the password against a set of rules.
        Returns True if valid, otherwise False.
        Errors are stored in the `self.errors` list.
        """
        self.errors.clear()

        if not any(c.isupper() for c in self.password):
            self.errors.append('Password must contain an uppercase letter.')
        if not any(c.islower() for c in self.password):
            self.errors.append('Password must contain a lowercase letter.')
        if not any(c.isdigit() for c in self.password):
            self.errors.append('Password must contain a digit.')
        if len(self.password) < 8:
            self.errors.append('Password must be at least 8 characters.')
        if any(c.isspace() for c in self.password):
            self.errors.append('Password cannot contain white spaces.')
        
        return not self.errors # Returns True if errors list is empty

# --- Usage Example ---
test_password1 = "ValidPass123"
validator1 = PasswordValidator(test_password1)
if validator1.validate():
    print(f"'{test_password1}' is a valid password.")
else:
    print(f"'{test_password1}' is invalid. Reasons: {validator1.errors}")

test_password2 = "badpw"
validator2 = PasswordValidator(test_password2)
if validator2.validate():
    print(f"'{test_password2}' is a valid password.")
else:
    print(f"'{test_password2}' is invalid. Reasons: {validator2.errors}")



# -----------------------------------------------------------------------------
# Section 5: JSON, Datetime, and Random Modules
# -----------------------------------------------------------------------------
import json
import random
import string
import time
from datetime import datetime, timedelta

print("\n--- Section 5: JSON, Datetime, and Random ---")

# Example 48: Convert a Python dictionary to a JSON string
person_dict = {'name': 'Bob', 'age': 12, 'children': None}
person_json = json.dumps(person_dict)
print(f"Dictionary converted to JSON string: {person_json}")

# Example 49: Pretty-print a JSON string
person_string = '{"name": "Bob", "languages": "English", "numbers": [2, 1.6, null]}'
person_dict_from_string = json.loads(person_string)
pretty_json = json.dumps(person_dict_from_string, indent=4, sort_keys=True)
print(f"Pretty-printed JSON:\n{pretty_json}")

# Example 50: Write JSON to a file
# Using .json extension is standard for files containing JSON data.
file_path = 'person.json'
person_data_to_write = {
    "name": "Bob",
    "languages": ["English", "French"],
    "married": True,
    "age": 32
}
with open(file_path, 'w') as json_file:
    json.dump(person_data_to_write, json_file, indent=4)
print(f"JSON data has been written to '{file_path}'")

# Example 51: Convert a string into a datetime object
date_string = "Feb 25 2020 4:20PM"
date_format = '%b %d %Y %I:%M%p'
datetime_object = datetime.strptime(date_string, date_format)
print(f"'{date_string}' as a datetime object: {datetime_object}")

# Example 52: Subtract a week from a given date
given_date = datetime(2020, 2, 25)
one_week = timedelta(days=7)
date_a_week_ago = given_date - one_week
print(f"One week before {given_date.date()} was: {date_a_week_ago.date()}")

# Example 53: Find the day of the week for a given date
date_to_check = datetime(2020, 7, 26)
day_of_week = date_to_check.strftime('%A')
print(f"The day of the week for {date_to_check.date()} is: {day_of_week}")

# Example 54: Generate 3 random integers divisible by 5
print("Three random integers between 100 and 999, divisible by 5:")
for _ in range(3):
    # random.randrange(start, stop, step) is perfect for this.
    random_num = random.randrange(100, 1000, 5)
    print(random_num, end=' ')
print()

# Example 55: Pick a random character from a string
name = 'pynative'
random_char = random.choice(name)
print(f"A random character from '{name}' is: '{random_char}'")

# Example 56: Generate a random string of a given length
def generate_random_string(length=5):
    """Generate a random string of fixed length."""
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for _ in range(length))

random_str = generate_random_string(5)
print(f"A random string of length 5: {random_str}")



# -----------------------------------------------------------------------------
# Section 6: Collection of Small, Reusable Functions
# -----------------------------------------------------------------------------
import math

def get_nth_fibonacci(n):
    """
    Recursively returns the nth Fibonacci number.
    Note: This is inefficient for large n.
    """
    if n <= 1:
        return n
    else:
        return get_nth_fibonacci(n - 1) + get_nth_fibonacci(n - 2)

def factorial(n):
    """Recursively returns the factorial of a number."""
    if n < 0:
        raise ValueError("Factorial is not defined for negative numbers.")
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

def get_squares(limit):
    """Returns a list of squares for numbers from 0 up to (not including) limit."""
    return [i**2 for i in range(limit)]

def get_square_roots(limit):
    """Returns a list of square roots for numbers from 0 up to limit."""
    return [i**0.5 for i in range(limit + 1)]

def add_even_odd_pairs(list1, list2):
    """
    Adds pairs of numbers from two lists if the first is even and the second is odd.
    """
    return [x + y for x, y in zip(list1, list2) if x % 2 == 0 and y % 2 != 0]

def strip_vowels(input_string):
    """Removes all vowels (case-insensitive) from a string."""
    vowels = "aeiouAEIOU"
    return "".join([char for char in input_string if char not in vowels])

def relu_activation(numbers):
    """Applies the Rectified Linear Unit (ReLU) activation function to a list."""
    return [max(0, x) for x in numbers]

def sigmoid_activation(numbers):
    """Applies the sigmoid activation function to a list."""
    return [round(1 / (1 + math.exp(-x)), 4) for x in numbers]

# The following block demonstrates how to use the functions above.
# It only runs when the script is executed directly.
if __name__ == "__main__":
    print("\n--- Section 6: Function Demonstrations ---")

    # Fibonacci
    print(f"The 8th Fibonacci number is: {get_nth_fibonacci(8)}")

    # Factorial
    print(f"The factorial of 5 is: {factorial(5)}")

    # Squares
    print(f"Squares up to 10: {get_squares(10)}")

    # Square Roots
    print(f"Square roots up to 9: {[round(r, 2) for r in get_square_roots(9)]}")

    # Add Even/Odd Pairs
    l1 = [2, 3, 4, 5, 6]
    l2 = [7, 8, 9, 10, 11]
    print(f"Sum of even/odd pairs from {l1} and {l2}: {add_even_odd_pairs(l1, l2)}")

    # Strip Vowels
    text = "Hello World, this is a test!"
    print(f"'{text}' with vowels stripped: '{strip_vowels(text)}'")

    # ReLU Activation
    data = [-3, -1, 0, 1.5, 4]
    print(f"ReLU applied to {data}: {relu_activation(data)}")

    # Sigmoid Activation
    print(f"Sigmoid applied to {data}: {sigmoid_activation(data)}")

